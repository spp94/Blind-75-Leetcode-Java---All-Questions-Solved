https://leetcode.com/problems/course-schedule/description/

There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.

For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return true if you can finish all courses. Otherwise, return false.

 

Example 1:

Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0. So it is possible.
Example 2:

Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.

Solution
---------

class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        Map<Integer, List<Integer>> map = new HashMap<>();
        for(int[] arr : prerequisites) {
            if(map.containsKey(arr[1])) {
                map.get(arr[1]).add(arr[0]);
            } else {
                List<Integer> list = new ArrayList<>();
                list.add(arr[0]);
                map.put(arr[1], list);
            }
        }
        Set<Integer> visited = new HashSet<>();
        for(int course = 0; course < numCourses; course++) {
            if(scheduleCourse(course, visited, map) == false) {
                return false;
            }
        }

        return true;
    }

    public boolean scheduleCourse(int course, Set<Integer> visited, Map<Integer, List<Integer>> map) {
        // Base case
        if(visited.contains(course)) {
            return false;
        }
        if(map.get(course) == null) {
            return true;
        }
        // Do all stuffs
        visited.add(course);
        for(int num : map.get(course)) {
            if(scheduleCourse(num, visited, map) == false) {
                return false;
            }
        }
        visited.remove(course);
        map.put(course, null);

        return true;
    }
}