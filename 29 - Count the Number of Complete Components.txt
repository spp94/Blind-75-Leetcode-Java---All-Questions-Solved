https://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph/description/

You are given an integer n. There is an undirected graph with n vertices, numbered from 0 to n - 1. You are given a 2D integer array edges where edges[i] = [ai, bi] denotes that there exists an undirected edge connecting vertices ai and bi.

Return the number of complete connected components of the graph.

A connected component is a subgraph of a graph in which there exists a path between any two vertices, and no vertex of the subgraph shares an edge with a vertex outside of the subgraph.

A connected component is said to be complete if there exists an edge between every pair of its vertices.

 

Example 1:



Input: n = 6, edges = [[0,1],[0,2],[1,2],[3,4]]
Output: 3
Explanation: From the picture above, one can see that all of the components of this graph are complete.

Solution
---------

class Solution {
    public int countCompleteComponents(int n, int[][] edges) {
        List<List<Integer>> adjacencyList = new ArrayList<>();
        for(int i = 0; i < n; i++) {
            adjacencyList.add(new ArrayList<>());
        }
        for(int[] edge : edges) {
            int from = edge[0];
            int to = edge[1];
            adjacencyList.get(from).add(to);
            adjacencyList.get(to).add(from);
        }

        int count = 0;
        Set<Integer> visited = new HashSet<>();
        for(int i = 0; i < n; i++) {
            if(!visited.contains(i)) {
                bfs(adjacencyList, visited, i);
                count++;
            }
        }

        return count;
    }

    private void bfs(List<List<Integer>> adjacencyList, Set<Integer> visited, int start) {
        Queue<Integer> queue = new LinkedList<>();
        visited.add(start);
        queue.add(start);

        while(!queue.isEmpty()) {
            int node = queue.poll();
            for(int neighbour : adjacencyList.get(node)) {
                if(!visited.contains(neighbour)) {
                    visited.add(neighbour);
                    queue.add(neighbour);
                }
            }
        }
    }
}