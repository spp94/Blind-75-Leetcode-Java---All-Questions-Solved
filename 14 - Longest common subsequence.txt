https://leetcode.com/problems/longest-common-subsequence/description/

Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

For example, "ace" is a subsequence of "abcde".
A common subsequence of two strings is a subsequence that is common to both strings.

 

Example 1:

Input: text1 = "abcde", text2 = "ace" 
Output: 3  
Explanation: The longest common subsequence is "ace" and its length is 3.
Example 2:

Input: text1 = "abc", text2 = "abc"
Output: 3
Explanation: The longest common subsequence is "abc" and its length is 3.
Example 3:

Input: text1 = "abc", text2 = "def"
Output: 0
Explanation: There is no such common subsequence, so the result is 0.


Solution:
---------

class Solution {
    public int longestCommonSubsequence(String s, String t) {
        int[][] dp = new int[s.length()+1][t.length()+1];
        // for(int[] ar : dp) {
        //     Arrays.fill(ar, -1);
        // }
        for(int i = 1; i <= s.length(); i++) {
            for(int j = 1; j <= t.length(); j++) {
                int match = 0, notMatch = 0;
                if(s.charAt(i-1) == t.charAt(j-1)) {
                    match = 1 + dp[i-1][j-1];
                } else {
                    notMatch = Math.max(dp[i][j-1], dp[i-1][j]);
                }
                // Return max of all stuffs
                dp[i][j] = Math.max(match, notMatch);
            }
        }

        return dp[s.length()][t.length()];
    }
    public int f(int i, int j, String s, String t, int[][] dp) {
        // Base case
        if(i <= 0 || j <= 0) {
            return 0;
        }
        // Do all stuffs
        int match = 0, notMatch = 0;
        if(s.charAt(i-1) == t.charAt(j-1)) {
            match = 1 + f(i-1, j-1, s, t, dp);
        } else {
            notMatch = Math.max(f(i, j-1, s, t, dp), f(i-1, j, s, t, dp));
        }
        // Return max of all stuffs
        return Math.max(match, notMatch);
    }
}