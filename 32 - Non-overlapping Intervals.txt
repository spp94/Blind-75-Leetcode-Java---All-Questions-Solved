https://leetcode.com/problems/non-overlapping-intervals/description/

Given an array of intervals intervals where intervals[i] = [starti, endi], return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.

Note that intervals which only touch at a point are non-overlapping. For example, [1, 2] and [2, 3] are non-overlapping.

 

Example 1:

Input: intervals = [[1,2],[2,3],[3,4],[1,3]]
Output: 1
Explanation: [1,3] can be removed and the rest of the intervals are non-overlapping.
Example 2:

Input: intervals = [[1,2],[1,2],[1,2]]
Output: 2
Explanation: You need to remove two [1,2] to make the rest of the intervals non-overlapping.
Example 3:

Input: intervals = [[1,2],[2,3]]
Output: 0
Explanation: You don't need to remove any of the intervals since they're already non-overlapping.

Solution
---------

class Solution {
    public int eraseOverlapIntervals(int[][] intervals) {
        if(intervals.length == 0) return 0;
        Arrays.sort(intervals, Comparator.comparingInt(i -> i[0]));
        int[] prevInterval = intervals[0];
        int count = 0;
        for(int i = 1; i < intervals.length; i++) {
            int[] currentInterval = intervals[i];
            if(prevInterval[1] <= currentInterval[0]) {
                prevInterval = currentInterval;
            }
            else {
                prevInterval[1] = Math.min(prevInterval[1], currentInterval[1]);
                count++;
            }
        }

        return count;
    }
}