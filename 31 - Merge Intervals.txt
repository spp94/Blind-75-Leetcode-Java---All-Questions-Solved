https://leetcode.com/problems/merge-intervals/description/

Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.
 

Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].
Example 2:

Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.

Solution
---------

class Solution {
    public int[][] merge(int[][] intervals) {
        if(intervals.length <= 1) return intervals;
        Arrays.sort(intervals, Comparator.comparingInt(i -> i[0]));
        List<int[]> list = new ArrayList<>();
        int[] prevInterval = intervals[0];
        list.add(prevInterval);
        for(int i = 1; i < intervals.length; i++) {
            int[] currentInterval = intervals[i];
            // overlapping
            if(prevInterval[1] >= currentInterval[0]) {
                prevInterval[1] = Math.max(prevInterval[1], currentInterval[1]);
            } 
            // non overlapping
            else {
                prevInterval = currentInterval;
                list.add(prevInterval);
            }
        }

        return list.toArray(new int[list.size()][]);
    }
}