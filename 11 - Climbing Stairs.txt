https://leetcode.com/problems/climbing-stairs/description/ 

You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

 

Example 1:

Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:

Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step

Solution
---------

class Solution {
    public int climbStairs(int n) {
        // int[] dp = new int[n];
        // Arrays.fill(dp, -1);
        // return f(n-1, dp);
        if(n <= 2) return n;
        int step1 = 1, step2 = 2;
        for(int step = 3; step <= n; step++) {
            int total = step1 + step2;
            step1 = step2;
            step2 = total;
        }

        return step2;
    }
    
    public int f(int index, int[] dp) {
        // Base Case
        if(index == 0) {
            return 1;
        } 
        if(index == 1) {
            return 2;
        }
        if(dp[index] != -1) {
            return dp[index];
        }
        // Do all stuffs
        int one_step = f(index-1, dp);
        int two_step = f(index-2, dp);
        // Return sum of all stuffs
        return one_step + two_step;
    }
}
